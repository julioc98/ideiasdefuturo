// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/user_use_case.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/julioc98/ideiasdefuturo/internal/domain"
)

// Mockstorager is a mock of storager interface.
type Mockstorager struct {
	ctrl     *gomock.Controller
	recorder *MockstoragerMockRecorder
}

// MockstoragerMockRecorder is the mock recorder for Mockstorager.
type MockstoragerMockRecorder struct {
	mock *Mockstorager
}

// NewMockstorager creates a new mock instance.
func NewMockstorager(ctrl *gomock.Controller) *Mockstorager {
	mock := &Mockstorager{ctrl: ctrl}
	mock.recorder = &MockstoragerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockstorager) EXPECT() *MockstoragerMockRecorder {
	return m.recorder
}

// FindOne mocks base method.
func (m *Mockstorager) FindOne(query *domain.User, args ...string) (*domain.User, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindOne", varargs...)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne.
func (mr *MockstoragerMockRecorder) FindOne(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*Mockstorager)(nil).FindOne), varargs...)
}

// Store mocks base method.
func (m *Mockstorager) Store(user *domain.User) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", user)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Store indicates an expected call of Store.
func (mr *MockstoragerMockRecorder) Store(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*Mockstorager)(nil).Store), user)
}

// Mockencrypter is a mock of encrypter interface.
type Mockencrypter struct {
	ctrl     *gomock.Controller
	recorder *MockencrypterMockRecorder
}

// MockencrypterMockRecorder is the mock recorder for Mockencrypter.
type MockencrypterMockRecorder struct {
	mock *Mockencrypter
}

// NewMockencrypter creates a new mock instance.
func NewMockencrypter(ctrl *gomock.Controller) *Mockencrypter {
	mock := &Mockencrypter{ctrl: ctrl}
	mock.recorder = &MockencrypterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockencrypter) EXPECT() *MockencrypterMockRecorder {
	return m.recorder
}

// Compare mocks base method.
func (m *Mockencrypter) Compare(hash, s string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Compare", hash, s)
	ret0, _ := ret[0].(error)
	return ret0
}

// Compare indicates an expected call of Compare.
func (mr *MockencrypterMockRecorder) Compare(hash, s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compare", reflect.TypeOf((*Mockencrypter)(nil).Compare), hash, s)
}

// Encrypt mocks base method.
func (m *Mockencrypter) Encrypt(s string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encrypt", s)
	ret0, _ := ret[0].(string)
	return ret0
}

// Encrypt indicates an expected call of Encrypt.
func (mr *MockencrypterMockRecorder) Encrypt(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*Mockencrypter)(nil).Encrypt), s)
}

// Mockauthentifier is a mock of authentifier interface.
type Mockauthentifier struct {
	ctrl     *gomock.Controller
	recorder *MockauthentifierMockRecorder
}

// MockauthentifierMockRecorder is the mock recorder for Mockauthentifier.
type MockauthentifierMockRecorder struct {
	mock *Mockauthentifier
}

// NewMockauthentifier creates a new mock instance.
func NewMockauthentifier(ctrl *gomock.Controller) *Mockauthentifier {
	mock := &Mockauthentifier{ctrl: ctrl}
	mock.recorder = &MockauthentifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockauthentifier) EXPECT() *MockauthentifierMockRecorder {
	return m.recorder
}

// GenerateToken mocks base method.
func (m *Mockauthentifier) GenerateToken(user *domain.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockauthentifierMockRecorder) GenerateToken(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*Mockauthentifier)(nil).GenerateToken), user)
}

// Mockchecker is a mock of checker interface.
type Mockchecker struct {
	ctrl     *gomock.Controller
	recorder *MockcheckerMockRecorder
}

// MockcheckerMockRecorder is the mock recorder for Mockchecker.
type MockcheckerMockRecorder struct {
	mock *Mockchecker
}

// NewMockchecker creates a new mock instance.
func NewMockchecker(ctrl *gomock.Controller) *Mockchecker {
	mock := &Mockchecker{ctrl: ctrl}
	mock.recorder = &MockcheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockchecker) EXPECT() *MockcheckerMockRecorder {
	return m.recorder
}

// Struct mocks base method.
func (m *Mockchecker) Struct(s interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Struct", s)
	ret0, _ := ret[0].(error)
	return ret0
}

// Struct indicates an expected call of Struct.
func (mr *MockcheckerMockRecorder) Struct(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Struct", reflect.TypeOf((*Mockchecker)(nil).Struct), s)
}

// Mockmessenger is a mock of messenger interface.
type Mockmessenger struct {
	ctrl     *gomock.Controller
	recorder *MockmessengerMockRecorder
}

// MockmessengerMockRecorder is the mock recorder for Mockmessenger.
type MockmessengerMockRecorder struct {
	mock *Mockmessenger
}

// NewMockmessenger creates a new mock instance.
func NewMockmessenger(ctrl *gomock.Controller) *Mockmessenger {
	mock := &Mockmessenger{ctrl: ctrl}
	mock.recorder = &MockmessengerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockmessenger) EXPECT() *MockmessengerMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *Mockmessenger) Send(recipient, msg string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", recipient, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockmessengerMockRecorder) Send(recipient, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*Mockmessenger)(nil).Send), recipient, msg)
}
